CREATE TABLE MAS_PASS_RULES
(
MSPR_ID INTEGER NOT NULL ,
TYPE CHARACTER VARYING(128) NULL,
PASS_CATEGORY CHARACTER VARYING(128) NULL,
AMOUNT INTEGER NULL,
DESCRIPTION CHARACTER VARYING(128) NULL,
PLAN_START_DATE TIMESTAMP WITHOUT TIME ZONE NULL,
ALERT_BEFORE_MINUTES CHARACTER VARYING(9) NULL, CREATED_BY text NOT NULL, 
 CREATED_BY_NAME text ,
 CREATED_DATE timestamp without time zone NOT NULL,
 MODIFIED_BY text,
 MODIFIED_BY_NAME text,
 MODIFIED_DATE timestamp without time zone,
 SYSTEM_ID TEXT, 
 SYSTEM_NAME text, 
 PRCT_ID TEXT,
 CREATED_BY_STS_ID TEXT, 
 MODIFIED_BY_STS_ID TEXT, 
 STATUS TEXT,
 PROCESS_STATUS TEXT ,
 DT_CODE TEXT ,
 DT_DESCRIPTION TEXT ,
 DTT_CODE TEXT ,
 DTT_DESCRIPTION TEXT ,
 VERSION_NO integer DEFAULT 0 
 );
CREATE SEQUENCE SEQ_MAS_PASS_RULES
INCREMENT 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1 
CACHE 20;


ALTER TABLE MAS_PASS_RULES
 ALTER COLUMN MSPR_ID  SET DEFAULT nextval('SEQ_MAS_PASS_RULES');


CREATE OR REPLACE FUNCTION TRG_MAS_PASS_RULES()
RETURNS trigger AS
$BODY$
BEGIN
NEW.TRG_MAS_PASS_RULES=CURRENT_TIMESTAMP;RETURN NEW;
END $BODY$
LANGUAGE plpgsql VOLATILE
COST 100;
ALTER TABLE MAS_PASS_RULES ADD CONSTRAINT MAS_PASS_RULES_pkey primary key(MSPR_ID);CREATE TABLE HST_MAS_PASS_RULES ( 

MSPR_ID INTEGER NULL ,
TYPE CHARACTER VARYING(128) NULL,
PASS_CATEGORY CHARACTER VARYING(128) NULL,
AMOUNT INTEGER NULL,
DESCRIPTION CHARACTER VARYING(128) NULL,
PLAN_START_DATE TIMESTAMP WITHOUT TIME ZONE NULL,
ALERT_BEFORE_MINUTES CHARACTER VARYING(9) NULL, CREATED_BY text NOT NULL, 
 CREATED_BY_NAME text ,
 CREATED_DATE timestamp without time zone NOT NULL,
 MODIFIED_BY text,
 MODIFIED_BY_NAME text,
 MODIFIED_DATE timestamp without time zone,
 SYSTEM_ID TEXT, 
 SYSTEM_NAME text, 
 PRCT_ID TEXT,
 CREATED_BY_STS_ID TEXT, 
 MODIFIED_BY_STS_ID TEXT, 
 STATUS TEXT,
 PROCESS_STATUS TEXT ,
 DT_CODE TEXT ,
 DT_DESCRIPTION TEXT ,
 DTT_CODE TEXT ,
 DTT_DESCRIPTION TEXT ,
 VERSION_NO integer DEFAULT 0 
 );
CREATE OR REPLACE FUNCTION FN_TRG_HST_MAS_PASS_RULES()
 RETURNS trigger AS 
 $BODY$ 
 DECLARE
 vSEQ BIGINT; 
 BEGIN 
 IF TG_OP = 'INSERT' THEN 
 INSERT INTO HST_MAS_PASS_RULES SELECT NEW.* ; 
 ELSIF TG_OP = 'UPDATE' THEN 
 INSERT INTO HST_MAS_PASS_RULES SELECT NEW.* ; 

 END IF; 
 RETURN NEW; 
 END; 
 $BODY$ 
 LANGUAGE plpgsql ; 

 CREATE TRIGGER TRG_HST_MAS_PASS_RULES
 AFTER INSERT Or UPDATE 
 ON MAS_PASS_RULES
 FOR EACH ROW 
 EXECUTE PROCEDURE FN_TRG_HST_MAS_PASS_RULES() ;


ALTER TABLE MAS_PASS_RULES  DISABLE TRIGGER TRG_HST_MAS_PASS_RULES ;
